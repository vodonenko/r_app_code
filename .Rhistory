yaxt='n',
xlab='',
ylab="Priority mail vs BWW, USPS and SE(# packages)",
type="l"
)
plot(aggregated_count[,4]/aggregated_count[,8],
xaxt='n',
yaxt='n',
xlab='',
ylab="Priority mail vs BWW, USPS and SE(# packages)"
)
plot(aggregated_count[,4]/aggregated_count[,8],
xaxt='n',
xlab='',
ylab="Priority mail vs BWW, USPS and SE(# packages)"
)
plot(aggregated_count[,4]/aggregated_count[,8],
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=1:(nrow(oaggregated_count)), labels=aggregated_count$end_week, las=2,cex.axis = 0.5)
axis(1, at=1:(nrow(aggregated_count)), labels=aggregated_count$end_week, las=2,cex.axis = 0.5)
plot(aggregated_count[100:nrow(aggregated_count),4]/aggregated_count[100:nrow(aggregated_count),8],
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=100:(nrow(aggregated_count)), labels=aggregated_count$end_week[100:nrow(aggregated_count)], las=2,cex.axis = 0.5)
axis(1, at=1:(nrow(aggregated_count)-100), labels=aggregated_count$end_week[100:nrow(aggregated_count)], las=2,cex.axis = 0.5)
1:(nrow(aggregated_count)-100)
plot(aggregated_count[100:nrow(aggregated_count),4]/aggregated_count[100:nrow(aggregated_count),8],
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=1:(nrow(aggregated_count)-100), labels=aggregated_count$end_week[100:nrow(aggregated_count)], las=2,cex.axis = 0.5)
100:nrow(aggregated_count)
plot(aggregated_count[100:(nrow(aggregated_count)+1),4]/aggregated_count[100:nrow(aggregated_count),8],
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=1:(nrow(aggregated_count)-100), labels=aggregated_count$end_week[100:nrow(aggregated_count)], las=2,cex.axis = 0.5)
aggregated<-aggregated[100:nrow(aggregated),]
aggregated_count<-aggregated[100:nrow(aggregated),]
aggregated_count<-aggregated_count[100:nrow(aggregated),]
aggregated_count<-aggregated_count[100:nrow(aggregated_count),]
plot(aggregated_count[,4]/aggregated_count[,8])
View(aggregated_count)
plot(aggregated_count[,4]/aggregated_count[,8])
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.5)
plot(aggregated_count[,4]/aggregated_count[,8],
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.5)
plot(aggregated_count[,4]/aggregated_count[,8],
main="Priority mail express"
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,4]/aggregated_count[,8],
main="Priority mail express"
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
plot(aggregated_count[,4]/aggregated_count[,8],
main="Priority mail express",
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS and SE (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,4]/aggregated_count[,8],
main="Priority mail express",
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,6]/aggregated_count[,8],
main="Shopfan express",
xaxt='n',
xlab='',
ylab="SE over BWW plus USPS (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,4]/aggregated_count[,8],
main="Priority mail express",
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS (# packages)",
type="l"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,6]/aggregated_count[,8],
main="Shopfan express",
xaxt='n',
xlab='',
ylab="SE over BWW plus USPS (# packages)",
type="l"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,4]/aggregated_count[,8],
main="Priority mail express",
xaxt='n',
xlab='',
ylab="Priority mail over BWW plus USPS (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
plot(aggregated_count[,6]/aggregated_count[,8],
main="Shopfan express",
xaxt='n',
xlab='',
ylab="SE over BWW plus USPS (# packages)"
)
axis(1, at=0:(nrow(aggregated_count)-1), labels=aggregated_count$end_week, las=2,cex.axis = 0.75)
save.image("~/Documents/R_repository/Shopfan/promotion_effect/interim_data/image.rdata.RData")
load("~/Documents/R_repository/Shopfan/margin_analysis/interim_data/image.rdata.RData")
?assign
data.frame(paste0("2","g")=3)
paste0("2","g")
data.frame(paste0("2","g")="h")
year_month <- read_non_usps$year_month
install.packages("knitr")
library("knitr", lib.loc="/home/roman/R/x86_64-pc-linux-gnu-library/3.1")
library("devtools", lib.loc="/home/roman/R/x86_64-pc-linux-gnu-library/3.1")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
search()
load("~/Documents/R_repository/Shopfan/margin_analysis/interim_data/image.rdata.RData")
View(input_db_ship_charge)
aggregate(input_db_ship_charge$fulfilment_cost, by=list(input_db_ship_charge$year_month), FUN=sum)
View(monthly_fulfilment)
aggregate(input_db_ship_charge$direct_cost[input_db_ship_charge$ship_type_id %in% c(1,2)],
by=list(input_db_ship_charge$year_month[input_db_ship_charge$ship_type_id %in% c(1,2)]),
FUN=sum)
usps_subset <- input_db_ship_charge[input_db_ship_charge$ship_type_id %in% c(1,2),]
View(usps_subset)
aggregate(usps_subset$direct_cost,
by=list(usps_subset$year_month,
FUN=sum)
aggregate(usps_subset$direct_cost,
by=list(usps_subset$year_month,
FUN=sum)
aggregate(input_db_ship_charge$fulfilment_cost, by=list(input_db_ship_charge$year_month), FUN=sum)
aggregate(usps_subset$direct_cost,
by=list(usps_subset$year_month,
FUN=sum))
aggregate(usps_subset$direct_cost,
by=list(usps_subset$year_month),
FUN=sum)
View(margin_summary)
View(usps_subset)
aggregate(usps_subset$direct_cost, by=list(usps_subset$year_month), FUN=sum)
View(usps_subset[!complete.cases(usps_subset),])
View(margin_analysis)
View(cost)
head(as.Date(cost$ProcessedDate))
View(cbind(as.Date(cost$ProcessedDate), cost$ProcessedDate))
cost$ProcessedDate
as.Date(cost$ProcessedDate)
View(data.frame(as.Date(cost$ProcessedDate), cost$ProcessedDate))
cost$year_month <- as.yearmon(as.Date(cost$ProcessedDate))
library(zoo)
install.packages("zoo")
library(zoo)
cost$year_month <- as.yearmon(as.Date(cost$ProcessedDate))
View(cost)
View(aggregate(cost$BillingCharge, by=list(cost$year_month), FUN=sum))
x<-2
eval(parse(text=function_expression))
function_expression <- "x^2+8"
eval(parse(text=function_expression))
number_chanks <- 1000
x <- x1
x1 <-1
x2 <- 2
number_chanks <- 1000
x <- x1
y <- eval(parse(text=function_expression))
x+(x2-x1)/number_chanks
vector(x)
while(x<x2){
x <- x+(x2-x1)/number_chunks
y <- eval(parse(text=function_expression))
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-1
x2 <- 2
number_chunks <- 1000
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
while(x<x2){
x <- x+(x2-x1)/number_chunks
y <- eval(parse(text=function_expression))
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-1
x2 <- 2
number_chunks <- 1000
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
while(x<x2){
x <- x+(x2-x1)/number_chunks
y <- eval(parse(text=function_expression))
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
(x2-x1)/number_chunks
function_expression <- "x^2+8"
x1 <-1
x2 <- 2
number_chunks <- 1000
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
while(x<=x2){
x <- x+(x2-x1)/number_chunks
y <- eval(parse(text=function_expression))
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-1
x2 <- 2
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
while(x<x2){
x <- x+(x2-x1)/number_chunks
y <- eval(parse(text=function_expression))
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
x_vector
plot(x_vector, y_vector)
plot(x_vector, y_vector, type="l")
?gsub
gsub(function_expression,"x", "new_x")
gsub("x", function_expression, "new_x")
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
x<-new_x
y<-new_y
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
plot(x_vector, y_vector, type="l")
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 100
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 100
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 10000
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 1000000
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 100000
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
print(x)
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-0
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
print(x)
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
function_expression <- "x^2+8"
x1 <-1
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
print(x)
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
tail(x_vector)
function_expression <- "x^2+8"
x1 <-1
x2 <- 5
number_chunks <- 5
x <- x1
y <- eval(parse(text=function_expression))
x_vector <- x
y_vector <- y
square <- 0
new_function_expression <- gsub("x", function_expression, "new_x")
while(x<x2){
new_x <- x+(x2-x1)/number_chunks
new_y <- eval(parse(text=new_function_expression))
subsquare <- (new_x - x)*y + (new_x - x)*(new_y - y)*0.5
square <- square + subsquare
x<-new_x
y<-new_y
print(x)
x_vector <- c(x_vector, x)
y_vector <- c(y_vector, y)
}
source('~/.active-rstudio-document', echo=TRUE)
plot(x_vector, y_vector)
plot(x_vector, y_vector, xlab="X", ylab="Y")
source('~/.active-rstudio-document', echo=TRUE)
plot(x_vector, y_vector, xlab="X", ylab="Y", type="l")
x_vector <- x
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("~/Documents/R_repository/Shopfan/margin_analysis/interim_data/image.rdata.RData")
View(clean_seed)
View(margin_analysis)
sub("x", "x^2", "(x())")
?gsub
sub(pattern="x", x="x^2", replacement="(x())")
sub(pattern="x", x="x*x", replacement="(x())")
gsub(pattern="x", x="x*x", replacement="(x())")
gsub(pattern="x", x="sin(x*x)", replacement="(x())")
setwd("~/Documents/R_repository/Coursera/Creating_application/cource_project")
shiny::runApp('~/Documents/R_repository/Coursera/Creating_application/integration')
shiny::runApp('integration')
deployApp()
library("shinyapps", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
deployApp()
deployApp()
terminateApp("cource_project")
setwd("~/Documents/R_repository/Coursera/Creating_application/cource_project/integration")
setwd("~/Documents/R_repository/Coursera/Creating_application/cource_project/integration")
library("shinyapps", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
getwd()
deployApp()
